This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: wp-content/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
create-wp-site.sh
docker-compose.yml
docker-entrypoint-custom.sh
dockerfile
readme.md
repomix.config.json

================================================================
Files
================================================================

================
File: create-wp-site.sh
================
 1: #!/bin/bash
 2: # create-wp-site.sh
 3: 
 4: # Generate a unique name for this instance
 5: INSTANCE_NAME="wp-test-$(date +%Y%m%d-%H%M%S)"
 6: 
 7: # Create project directory
 8: mkdir -p "$INSTANCE_NAME"
 9: cd "$INSTANCE_NAME"
10: 
11: # Copy Docker files
12: cp . Dockerfile
13: cp . docker-entrypoint-custom.sh
14: cp . docker-compose.yml
15: 
16: # Start containers
17: docker-compose up -d
18: 
19: echo "WordPress site starting at http://localhost"
20: echo "Admin login: jerry / garcia"

================
File: docker-compose.yml
================
 1: services:
 2:   # MySQL Service
 3:   db:
 4:     image: mysql:5.7
 5:     volumes:
 6:       - db_data:/var/lib/mysql
 7:     restart: always
 8:     environment:
 9:       MYSQL_ROOT_PASSWORD: rootpassword
10:       MYSQL_DATABASE: wordpress
11:       MYSQL_USER: wordpress
12:       MYSQL_PASSWORD: wordpress
13:     networks:
14:       - wordpress_net
15: 
16:   # WordPress Service
17:   wordpress:
18:     build: 
19:       context: .
20:       dockerfile: Dockerfile
21:     image: wp-wordpress
22:     depends_on:
23:       - db
24:     ports:
25:       - "80:80"  # Changed from 8080:80
26:     restart: always
27:     volumes:
28:       - wp_data:/var/www/html
29:       - ./wp-content:/var/www/html/wp-content
30:     environment:
31:       WORDPRESS_DB_HOST: db
32:       WORDPRESS_DB_NAME: wordpress
33:       WORDPRESS_DB_USER: wordpress
34:       WORDPRESS_DB_PASSWORD: wordpress
35:       WORDPRESS_SITE_URL: http://localhost  # Changed from http://localhost:8080
36:       WORDPRESS_SITE_TITLE: Jerry's WordPress Dev
37:       WORDPRESS_ADMIN_USER: jerry  # Changed from admin
38:       WORDPRESS_ADMIN_PASSWORD: garcia  # Changed from admin_password
39:       WORDPRESS_ADMIN_EMAIL: admin@example.com
40:     networks:
41:       - wordpress_net
42: 
43: networks:
44:   wordpress_net:
45: 
46: volumes:
47:   db_data:
48:   wp_data:

================
File: docker-entrypoint-custom.sh
================
 1: #!/bin/bash
 2: set -e
 3: 
 4: # First run the original WordPress entrypoint to set up the environment
 5: . /usr/local/bin/docker-entrypoint.sh
 6: 
 7: # Check if WordPress is already installed
 8: if [ ! -f wp-config.php ]; then
 9:   # Wait for MySQL to be ready
10:   echo "Waiting for database connection..."
11:   until wp db check --allow-root; do
12:     echo "Database not ready yet, waiting..."
13:     sleep 2
14:   done
15: 
16:   # Set up WP config
17:   echo "Creating wp-config.php..."
18:   wp config create --allow-root \
19:     --dbname="${WORDPRESS_DB_NAME}" \
20:     --dbuser="${WORDPRESS_DB_USER}" \
21:     --dbpass="${WORDPRESS_DB_PASSWORD}" \
22:     --dbhost="${WORDPRESS_DB_HOST}" \
23:     --dbprefix="${WORDPRESS_TABLE_PREFIX:-wp_}"
24: 
25:   # Install WordPress
26:   echo "Installing WordPress..."
27:   wp core install --allow-root \
28:     --url="${WORDPRESS_SITE_URL:-localhost}" \
29:     --title="${WORDPRESS_SITE_TITLE:-WordPress Development Site}" \
30:     --admin_user="${WORDPRESS_ADMIN_USER:-admin}" \
31:     --admin_password="${WORDPRESS_ADMIN_PASSWORD:-password}" \
32:     --admin_email="${WORDPRESS_ADMIN_EMAIL:-admin@example.com}"
33: 
34:   # Remove all default themes except the latest one
35:   echo "Managing themes..."
36:   LATEST_DEFAULT_THEME=$(wp theme list --status=active --field=name --allow-root)
37:   wp theme list --field=name --allow-root | grep -v "$LATEST_DEFAULT_THEME" | xargs -I % wp theme delete % --allow-root
38: 
39:   # Install Kadence theme
40:   wp theme install kadence --allow-root
41: 
42:   # Install standard plugins
43:   echo "Installing standard plugins..."
44:   wp plugin install deadpress --activate --allow-root
45:   wp plugin install woocommerce --activate --allow-root
46:   wp plugin install query-monitor --activate --allow-root
47:   wp plugin install wordpress-beta-tester --activate --allow-root
48: 
49:   echo "WordPress installation complete!"
50: fi
51: 
52: # Execute the passed command
53: exec "$@"

================
File: dockerfile
================
 1: # Use the official WordPress image as our base
 2: FROM wordpress:latest
 3: 
 4: # Install dependencies needed for wp-cli
 5: RUN apt-get update && apt-get install -y \
 6:     less \
 7:     default-mysql-client \
 8:     sudo \
 9:     && rm -rf /var/lib/apt/lists/*
10: 
11: # Install wp-cli
12: RUN curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
13:     && chmod +x wp-cli.phar \
14:     && mv wp-cli.phar /usr/local/bin/wp
15: 
16: # Set up wp-cli to run as www-data user
17: RUN chown www-data:www-data /usr/local/bin/wp
18: RUN mkdir -p /var/www/.wp-cli
19: RUN chown www-data:www-data /var/www/.wp-cli
20: 
21: # Set working directory
22: WORKDIR /var/www/html
23: 
24: # Create initialization script to install WordPress when container starts
25: COPY docker-entrypoint-custom.sh /usr/local/bin/
26: RUN chmod +x /usr/local/bin/docker-entrypoint-custom.sh
27: 
28: # Use our custom entrypoint
29: ENTRYPOINT ["docker-entrypoint-custom.sh"]
30: CMD ["apache2-foreground"]

================
File: readme.md
================
  1: # WordPress Docker Development Environment
  2: 
  3: This Docker setup provides a complete WordPress development environment with wp-cli pre-installed. It's designed to make it easy to spin up new WordPress test sites quickly.
  4: 
  5: ## Files Included
  6: 
  7: - `Dockerfile` - Creates a WordPress image with wp-cli installed
  8: - `docker-entrypoint-custom.sh` - Custom initialization script that sets up WordPress
  9: - `docker-compose.yml` - Configures the WordPress and MySQL services
 10: 
 11: ## Getting Started
 12: 
 13: ### Prerequisites
 14: 
 15: - Docker Desktop installed and running
 16: - Basic knowledge of Docker and WordPress
 17: 
 18: ### Setup Instructions
 19: 
 20: 1. Create a new directory for your project:
 21:    ```
 22:    mkdir wordpress-dev
 23:    cd wordpress-dev
 24:    ```
 25: 
 26: 2. Copy all the files from this setup into your project directory.
 27: 
 28: 3. Start the containers:
 29:    ```
 30:    docker-compose up -d
 31:    ```
 32: 
 33: 4. Wait for WordPress to be installed automatically (this may take a minute).
 34: 
 35: 5. Access your WordPress site at http://localhost:8080
 36: 
 37: 6. Log in to the WordPress admin at http://localhost:8080/wp-admin using:
 38:    - Username: admin
 39:    - Password: admin_password (or what you set in the docker-compose.yml file)
 40: 
 41: ## Using wp-cli
 42: 
 43: To use wp-cli commands inside your running container:
 44: 
 45: ```bash
 46: docker-compose exec wordpress wp --info
 47: ```
 48: 
 49: Some useful wp-cli commands:
 50: 
 51: ```bash
 52: # List all plugins
 53: docker-compose exec wordpress wp plugin list
 54: 
 55: # Install and activate a plugin
 56: docker-compose exec wordpress wp plugin install woocommerce --activate
 57: 
 58: # Update all plugins
 59: docker-compose exec wordpress wp plugin update --all
 60: 
 61: # Create a new user
 62: docker-compose exec wordpress wp user create editor editor@example.com --role=editor
 63: ```
 64: 
 65: ## Saving Your WordPress Image
 66: 
 67: After setting up your WordPress site with desired plugins, themes, and configurations, you can save the image for future use:
 68: 
 69: ```bash
 70: # Get the container ID
 71: docker ps
 72: 
 73: # Create a new image from the container
 74: docker commit [container-id] my-wordpress-dev:latest
 75: ```
 76: 
 77: ## Creating New Sites from Your Saved Image
 78: 
 79: 1. Create a new docker-compose.yml file pointing to your saved image:
 80:    ```yaml
 81:    version: '3'
 82:    
 83:    services:
 84:      db:
 85:        image: mysql:5.7
 86:        # ...same as before
 87:      
 88:      wordpress:
 89:        image: my-wordpress-dev:latest  # Your saved image
 90:        # ...rest of configuration
 91:    ```
 92: 
 93: 2. Run `docker-compose up -d` to start your new site with all your pre-configured settings.
 94: 
 95: ## Customization
 96: 
 97: - Edit `docker-compose.yml` to change port mappings, environment variables, or volume settings
 98: - Modify `docker-entrypoint-custom.sh` to add custom initialization steps
 99: - Update `Dockerfile` to install additional tools or plugins
100: 
101: ## Troubleshooting
102: 
103: - If the site doesn't come up, check the logs: `docker-compose logs`
104: - To reset completely: `docker-compose down -v` (this will delete all data)
105: - If you need to access the container shell: `docker-compose exec wordpress bash`

================
File: repomix.config.json
================
 1: {
 2:     "output": {
 3:       "style": "plain",
 4:       "filePath": "repomix-docker-wp.txt",
 5:       "removeComments": false,
 6:       "showLineNumbers": true,
 7:       "topFilesLength": 10
 8:     },
 9:     "ignore": {
10:       "customPatterns": ["wp-content/**"]
11:     }
12:   }



================================================================
End of Codebase
================================================================
